{"remainingRequest":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiang/work/hytx/hytx-rebuild/src/components/CircleMeteor/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiang/work/hytx/hytx-rebuild/src/components/CircleMeteor/index.vue","mtime":1546481084988},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport meteor from './meteor.png'\n\nconst meteorImg = new Image()\nmeteorImg.src = meteor\n\n// 星星\nclass Star {\n  constructor(width, height) {\n    this.width = width\n    this.height = height\n    this.directionX = Math.round(Math.random())\n    this.directionY = Math.round(Math.random())\n  }\n  draw(ctx) {\n    ctx.beginPath()\n    this.x = Math.round(Math.random() * this.width)\n    this.y = Math.round(Math.random() * this.height)\n    this.r = Math.round(Math.random() * 8)\n    this.opcity = (Math.random() + 0.5).toFixed(2)\n    let grd = ctx.createRadialGradient(\n      this.x,\n      this.y,\n      0,\n      this.x,\n      this.y,\n      this.r\n    )\n    grd.addColorStop(0, `rgba(255,255,255,${this.opcity})`)\n    grd.addColorStop(1, 'rgba(255,255,255,0)')\n    ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI)\n    ctx.fillStyle = grd\n    ctx.fill()\n    ctx.closePath()\n  }\n  move(ctx) {\n    let x = Math.round(Math.random() * 2)\n    let y = Math.round(Math.random() * 2)\n    this.x = this.directionX ? this.x + x : this.x - x\n    this.y = this.directionX ? this.y + y : this.y - y\n    if (this.x < 0) this.x = this.width\n    if (this.x > this.width) this.x = 0\n    if (this.y < 0) this.y = this.height\n    if (this.y > this.height) this.y = 0\n    ctx.beginPath()\n    let grd = ctx.createRadialGradient(\n      this.x,\n      this.y,\n      0,\n      this.x,\n      this.y,\n      this.r\n    )\n    grd.addColorStop(0, `rgba(255,255,255,${this.opcity})`)\n    grd.addColorStop(1, 'rgba(255,255,255,0)')\n    ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI)\n    ctx.fillStyle = grd\n    ctx.fill()\n    ctx.closePath()\n  }\n}\n// 流星\nclass Meteor {\n  constructor(width, height) {\n    this.width = 140\n    this.height = 140\n    this.pWidth = width\n    this.pHeight = height\n    this.opcity = Math.random().toFixed(2)\n    this.x = Math.round(Math.random() * this.pWidth) + this.width\n    this.y = -Math.round(Math.random() * 5) * this.height\n  }\n  draw(ctx) {\n    ctx.beginPath()\n    ctx.globalAlpha = this.opcity\n    ctx.drawImage(meteorImg, this.x, this.y, this.width, this.height)\n    ctx.closePath()\n  }\n  move(ctx) {\n    this.x = this.x - 5\n    this.y = this.y + 5\n    if (this.x < -140 || this.y > this.pHeight + 140) {\n      this.opcity = Math.random().toFixed(2)\n      this.x = Math.round(Math.random() * this.pWidth) + this.width\n      this.y = -this.height\n    }\n    ctx.beginPath()\n    ctx.globalAlpha = this.opcity\n    ctx.drawImage(meteorImg, this.x, this.y, this.width, this.height)\n    ctx.closePath()\n  }\n}\n\nexport default {\n  data() {\n    return {\n      ctx: null, // canvas上下文\n      stars: [], // 所有星星\n      meteors: [], // 所有流星\n      width: null, // canvas宽度\n      height: null // canvas高度\n    }\n  },\n  mounted() {\n    this.width = this.$refs.canvas.width = this.$refs.canvas.offsetWidth\n    this.height = this.$refs.canvas.height = this.$refs.canvas.offsetHeight - 75\n    this.ctx = this.$refs.canvas.getContext('2d')\n    this.createStars()\n    this.createMeteors()\n    setInterval(() => {\n      this.ctx.clearRect(0, 0, this.width, this.height)\n      this.moveStars()\n      this.moveMeteors()\n    }, 40)\n  },\n  methods: {\n    // 创建星星[默认40个]\n    createStars(num = 40) {\n      for (let i = 0; i < num; i++) {\n        let star = new Star(this.width, this.height)\n        star.draw(this.ctx)\n        this.stars.push(star)\n      }\n    },\n    // 移动星星\n    moveStars() {\n      this.stars.forEach(item => {\n        item.move(this.ctx)\n      })\n    },\n    // 创建流星[默认5个]\n    createMeteors(num = 1) {\n      for (let i = 0; i < num; i++) {\n        let meteor = new Meteor(this.width, this.height)\n        meteor.draw(this.ctx)\n        this.meteors.push(meteor)\n      }\n    },\n    // 移动流星\n    moveMeteors() {\n      this.meteors.forEach(item => {\n        item.move(this.ctx)\n      })\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;AAKA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/CircleMeteor","sourcesContent":["<template>\n  <canvas class=\"meteor-canvas\" ref=\"canvas\"></canvas>\n</template>\n\n<script>\nimport meteor from './meteor.png'\n\nconst meteorImg = new Image()\nmeteorImg.src = meteor\n\n// 星星\nclass Star {\n  constructor(width, height) {\n    this.width = width\n    this.height = height\n    this.directionX = Math.round(Math.random())\n    this.directionY = Math.round(Math.random())\n  }\n  draw(ctx) {\n    ctx.beginPath()\n    this.x = Math.round(Math.random() * this.width)\n    this.y = Math.round(Math.random() * this.height)\n    this.r = Math.round(Math.random() * 8)\n    this.opcity = (Math.random() + 0.5).toFixed(2)\n    let grd = ctx.createRadialGradient(\n      this.x,\n      this.y,\n      0,\n      this.x,\n      this.y,\n      this.r\n    )\n    grd.addColorStop(0, `rgba(255,255,255,${this.opcity})`)\n    grd.addColorStop(1, 'rgba(255,255,255,0)')\n    ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI)\n    ctx.fillStyle = grd\n    ctx.fill()\n    ctx.closePath()\n  }\n  move(ctx) {\n    let x = Math.round(Math.random() * 2)\n    let y = Math.round(Math.random() * 2)\n    this.x = this.directionX ? this.x + x : this.x - x\n    this.y = this.directionX ? this.y + y : this.y - y\n    if (this.x < 0) this.x = this.width\n    if (this.x > this.width) this.x = 0\n    if (this.y < 0) this.y = this.height\n    if (this.y > this.height) this.y = 0\n    ctx.beginPath()\n    let grd = ctx.createRadialGradient(\n      this.x,\n      this.y,\n      0,\n      this.x,\n      this.y,\n      this.r\n    )\n    grd.addColorStop(0, `rgba(255,255,255,${this.opcity})`)\n    grd.addColorStop(1, 'rgba(255,255,255,0)')\n    ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI)\n    ctx.fillStyle = grd\n    ctx.fill()\n    ctx.closePath()\n  }\n}\n// 流星\nclass Meteor {\n  constructor(width, height) {\n    this.width = 140\n    this.height = 140\n    this.pWidth = width\n    this.pHeight = height\n    this.opcity = Math.random().toFixed(2)\n    this.x = Math.round(Math.random() * this.pWidth) + this.width\n    this.y = -Math.round(Math.random() * 5) * this.height\n  }\n  draw(ctx) {\n    ctx.beginPath()\n    ctx.globalAlpha = this.opcity\n    ctx.drawImage(meteorImg, this.x, this.y, this.width, this.height)\n    ctx.closePath()\n  }\n  move(ctx) {\n    this.x = this.x - 5\n    this.y = this.y + 5\n    if (this.x < -140 || this.y > this.pHeight + 140) {\n      this.opcity = Math.random().toFixed(2)\n      this.x = Math.round(Math.random() * this.pWidth) + this.width\n      this.y = -this.height\n    }\n    ctx.beginPath()\n    ctx.globalAlpha = this.opcity\n    ctx.drawImage(meteorImg, this.x, this.y, this.width, this.height)\n    ctx.closePath()\n  }\n}\n\nexport default {\n  data() {\n    return {\n      ctx: null, // canvas上下文\n      stars: [], // 所有星星\n      meteors: [], // 所有流星\n      width: null, // canvas宽度\n      height: null // canvas高度\n    }\n  },\n  mounted() {\n    this.width = this.$refs.canvas.width = this.$refs.canvas.offsetWidth\n    this.height = this.$refs.canvas.height = this.$refs.canvas.offsetHeight - 75\n    this.ctx = this.$refs.canvas.getContext('2d')\n    this.createStars()\n    this.createMeteors()\n    setInterval(() => {\n      this.ctx.clearRect(0, 0, this.width, this.height)\n      this.moveStars()\n      this.moveMeteors()\n    }, 40)\n  },\n  methods: {\n    // 创建星星[默认40个]\n    createStars(num = 40) {\n      for (let i = 0; i < num; i++) {\n        let star = new Star(this.width, this.height)\n        star.draw(this.ctx)\n        this.stars.push(star)\n      }\n    },\n    // 移动星星\n    moveStars() {\n      this.stars.forEach(item => {\n        item.move(this.ctx)\n      })\n    },\n    // 创建流星[默认5个]\n    createMeteors(num = 1) {\n      for (let i = 0; i < num; i++) {\n        let meteor = new Meteor(this.width, this.height)\n        meteor.draw(this.ctx)\n        this.meteors.push(meteor)\n      }\n    },\n    // 移动流星\n    moveMeteors() {\n      this.meteors.forEach(item => {\n        item.move(this.ctx)\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.meteor-canvas {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n</style>\n"]}]}