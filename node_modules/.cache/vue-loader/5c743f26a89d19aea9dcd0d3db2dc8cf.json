{"remainingRequest":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiang/work/hytx/hytx-rebuild/src/components/CircleBall/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiang/work/hytx/hytx-rebuild/src/components/CircleBall/index.vue","mtime":1548819253177},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nclass BallItem {\n  constructor(x, y, z, ele) {\n    this.x = x\n    this.y = y\n    this.z = z\n    this.ele = ele\n    this.radius = this.ele.offsetWidth / 2\n  }\n  // 圆心和半径\n  move(x, y, r) {\n    let scale = r / (r - this.z / 2)\n    let alpha = (this.z + r) / (2 * r)\n    let top = this.y + y - this.radius + 'px'\n    let left = this.x + x - this.radius + 'px'\n    let transform = `translate3d(${left}, ${top}, 0) scale(${scale})`\n    this.ele.style.opacity = alpha + 0.5\n    this.ele.style.transform = transform\n    this.ele.style.webkitTransform = transform\n    this.ele.style.zIndex = parseInt(scale * 100)\n  }\n}\n\nimport { mapState } from 'vuex'\nimport dialogService from '../../service/dialogService'\n\nexport default {\n  props: ['data'],\n  data() {\n    return {\n      radius: null, // 半径\n      center: null, // 圆心\n      children: [], // 小球\n      offset: null, // 坐标偏移量\n      animate: null, // 动画计时器\n      angleY: Math.PI / 2000,\n      angleX: Math.PI / 2000\n    }\n  },\n  mounted() {\n    let radius = this.$refs.ballWrapper.offsetWidth / 2\n    this.radius = radius - 40\n    this.offset = {\n      y: this.$refs.ballWrapper.offsetTop,\n      x: this.$refs.ballWrapper.offsetLeft\n    }\n    this.center = { x: radius, y: radius }\n  },\n  methods: {\n    // init 绘制初始坐标\n    init() {\n      this.stopAnimation()\n      let children = document.querySelectorAll('.ball-item')\n      children.forEach((item, index) => {\n        let a = Math.acos((2 * index + 1) / children.length - 1)\n        let b = a * Math.sqrt(children.length * Math.PI)\n        let x = this.radius * Math.sin(a) * Math.cos(b)\n        let y = this.radius * Math.sin(a) * Math.sin(b)\n        let z = this.radius * Math.cos(a)\n        let it = new BallItem(x, y, z, item)\n        this.children.push(it)\n      })\n      this.startAnimation()\n    },\n    rotateX() {\n      let cos = Math.cos(this.angleX)\n      let sin = Math.sin(this.angleX)\n      this.children.forEach(item => {\n        let y = item.y * cos - item.z * sin\n        let z = item.z * cos + item.y * sin\n        item.y = y\n        item.z = z\n      })\n    },\n    rotateY() {\n      let cos = Math.cos(this.angleY)\n      let sin = Math.sin(this.angleY)\n      this.children.forEach((item, index) => {\n        let x = item.x * cos - item.z * sin\n        let z = item.z * cos + item.x * sin\n        item.x = x\n        item.z = z\n      })\n    },\n    // animation\n    animation() {\n      this.rotateX()\n      this.rotateY()\n      this.children.forEach(item => {\n        item.move(this.center.x, this.center.y, this.radius)\n      })\n    },\n    // startAnimation\n    startAnimation() {\n      this.animate = setInterval(() => {\n        this.animation()\n      }, 40)\n    },\n    // stopAnimation\n    stopAnimation() {\n      clearInterval(this.animate)\n      this.animate = null\n    },\n    // touchstart\n    touchstart() {\n      this.stopAnimation()\n    },\n    // touchmove\n    touchmove(event) {\n      let x = event.touches[0].clientX - this.center.x\n      let y = event.touches[0].clientY - this.center.y\n      this.angleY = x * -0.0001\n      this.angleX = y * -0.0001\n      this.animation()\n    },\n    // touchend\n    touchend() {\n      let x = event.changedTouches[0].clientX - this.center.x\n      let y = event.changedTouches[0].clientY - this.center.y\n      this.angleY = x * -0.0001\n      this.angleX = y * -0.0001\n      this.startAnimation()\n    },\n    // 点击ball-item\n    childTouch(item) {\n      let _self = this\n      if (this.matchInfo.yesterday_share_passive_num) {\n        dialogService.confirm('你还有分享任务未完成,去完成', function(status) {\n          if (status) _self.$router.push('/circle/task')\n        })\n      } else {\n        this.$router.push(`/circle/match/${item.id}`)\n      }\n    }\n  },\n  computed: {\n    ...mapState({\n      matchInfo: state => state.circle.matchInfo\n    })\n  },\n  components: {\n    BallItem\n  },\n  watch: {\n    data(newVal) {\n      this.$nextTick(() => {\n        this.init()\n      })\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgfile":"index.vue","sourceRoot":"src/components/CircleBall","sourcesContent":["<!--\n    @name       CircleBall\n    @desc       互推圈球体\n    @props \n            data    数据列表\n-->\n<template>\n  <div ref=\"ballWrapper\" class=\"circle-ball\" @touchstart.stop.prevent=\"touchstart()\" @touchmove.stop.prevent=\"touchmove($event)\" @touchend.stop.prevent=\"touchend($event)\">\n    <div class=\"ball-item\" v-for=\"(item,index) in data\" :key=\"index\" :item=\"item\" @touchstart=\"childTouch(item)\">\n      <img v-if=\"item.head_picture || item.head_portrait\" :src=\"item.head_picture || item.head_portrait\" alt=\"\" class=\"ball-item-head\">\n      <img v-else src=\"/static/img/default-header.png\" alt=\"\" class=\"ball-item-head\">\n    </div>\n  </div>\n</template>\n\n<script>\nclass BallItem {\n  constructor(x, y, z, ele) {\n    this.x = x\n    this.y = y\n    this.z = z\n    this.ele = ele\n    this.radius = this.ele.offsetWidth / 2\n  }\n  // 圆心和半径\n  move(x, y, r) {\n    let scale = r / (r - this.z / 2)\n    let alpha = (this.z + r) / (2 * r)\n    let top = this.y + y - this.radius + 'px'\n    let left = this.x + x - this.radius + 'px'\n    let transform = `translate3d(${left}, ${top}, 0) scale(${scale})`\n    this.ele.style.opacity = alpha + 0.5\n    this.ele.style.transform = transform\n    this.ele.style.webkitTransform = transform\n    this.ele.style.zIndex = parseInt(scale * 100)\n  }\n}\n\nimport { mapState } from 'vuex'\nimport dialogService from '../../service/dialogService'\n\nexport default {\n  props: ['data'],\n  data() {\n    return {\n      radius: null, // 半径\n      center: null, // 圆心\n      children: [], // 小球\n      offset: null, // 坐标偏移量\n      animate: null, // 动画计时器\n      angleY: Math.PI / 2000,\n      angleX: Math.PI / 2000\n    }\n  },\n  mounted() {\n    let radius = this.$refs.ballWrapper.offsetWidth / 2\n    this.radius = radius - 40\n    this.offset = {\n      y: this.$refs.ballWrapper.offsetTop,\n      x: this.$refs.ballWrapper.offsetLeft\n    }\n    this.center = { x: radius, y: radius }\n  },\n  methods: {\n    // init 绘制初始坐标\n    init() {\n      this.stopAnimation()\n      let children = document.querySelectorAll('.ball-item')\n      children.forEach((item, index) => {\n        let a = Math.acos((2 * index + 1) / children.length - 1)\n        let b = a * Math.sqrt(children.length * Math.PI)\n        let x = this.radius * Math.sin(a) * Math.cos(b)\n        let y = this.radius * Math.sin(a) * Math.sin(b)\n        let z = this.radius * Math.cos(a)\n        let it = new BallItem(x, y, z, item)\n        this.children.push(it)\n      })\n      this.startAnimation()\n    },\n    rotateX() {\n      let cos = Math.cos(this.angleX)\n      let sin = Math.sin(this.angleX)\n      this.children.forEach(item => {\n        let y = item.y * cos - item.z * sin\n        let z = item.z * cos + item.y * sin\n        item.y = y\n        item.z = z\n      })\n    },\n    rotateY() {\n      let cos = Math.cos(this.angleY)\n      let sin = Math.sin(this.angleY)\n      this.children.forEach((item, index) => {\n        let x = item.x * cos - item.z * sin\n        let z = item.z * cos + item.x * sin\n        item.x = x\n        item.z = z\n      })\n    },\n    // animation\n    animation() {\n      this.rotateX()\n      this.rotateY()\n      this.children.forEach(item => {\n        item.move(this.center.x, this.center.y, this.radius)\n      })\n    },\n    // startAnimation\n    startAnimation() {\n      this.animate = setInterval(() => {\n        this.animation()\n      }, 40)\n    },\n    // stopAnimation\n    stopAnimation() {\n      clearInterval(this.animate)\n      this.animate = null\n    },\n    // touchstart\n    touchstart() {\n      this.stopAnimation()\n    },\n    // touchmove\n    touchmove(event) {\n      let x = event.touches[0].clientX - this.center.x\n      let y = event.touches[0].clientY - this.center.y\n      this.angleY = x * -0.0001\n      this.angleX = y * -0.0001\n      this.animation()\n    },\n    // touchend\n    touchend() {\n      let x = event.changedTouches[0].clientX - this.center.x\n      let y = event.changedTouches[0].clientY - this.center.y\n      this.angleY = x * -0.0001\n      this.angleX = y * -0.0001\n      this.startAnimation()\n    },\n    // 点击ball-item\n    childTouch(item) {\n      let _self = this\n      if (this.matchInfo.yesterday_share_passive_num) {\n        dialogService.confirm('你还有分享任务未完成,去完成', function(status) {\n          if (status) _self.$router.push('/circle/task')\n        })\n      } else {\n        this.$router.push(`/circle/match/${item.id}`)\n      }\n    }\n  },\n  computed: {\n    ...mapState({\n      matchInfo: state => state.circle.matchInfo\n    })\n  },\n  components: {\n    BallItem\n  },\n  watch: {\n    data(newVal) {\n      this.$nextTick(() => {\n        this.init()\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.circle-ball {\n  width: 100%;\n  height: 100%;\n  position: relative;\n}\n.ball-item {\n  top: 0;\n  left: 0;\n  opacity: 0;\n  width: 40px;\n  height: 40px;\n  overflow: hidden;\n  position: absolute;\n  border-radius: 20px;\n  box-sizing: border-box;\n  border: 2px solid #8aa1ff;\n}\n.ball-item-head {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"]}]}