{"remainingRequest":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/babel-loader/lib/index.js!/Users/qiang/work/hytx/hytx-rebuild/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/qiang/work/hytx/hytx-rebuild/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiang/work/hytx/hytx-rebuild/src/module/common/cropper/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiang/work/hytx/hytx-rebuild/src/module/common/cropper/index.vue","mtime":1546945723962},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/qiang/work/hytx/hytx-rebuild/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.match\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _objectSpread from \"/Users/qiang/work/hytx/hytx-rebuild/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Cropper from 'cropperjs';\nimport { getOssConfig } from '@/utils';\nimport { mapState, mapActions } from 'vuex';\nimport eventBus from '../../../utils/eventBus';\nimport httpService from '@/service/httpService';\nimport dialogService from '../../../service/dialogService.js';\nexport default {\n  data: function data() {\n    return {\n      edit: false,\n      // 编辑状态\n      cropper: null,\n      // 裁剪器\n      editing: false // 编辑中\n\n    };\n  },\n  mounted: function mounted() {\n    if (!this.input) this.$router.back();\n  },\n  methods: _objectSpread({}, mapActions(['system/updateCropper']), {\n    // 裁剪初始化\n    crop: function crop() {\n      if (!this.input) return;\n      var element = document.querySelector('#cropper');\n      this.cropper = new Cropper(element, {\n        viewMode: 2,\n        modal: false,\n        autoCropArea: 1,\n        dragMode: 'move',\n        aspectRatio: this.input.ratio || ''\n      });\n    },\n    // 上传原图\n    uploadOrigin: function uploadOrigin() {\n      if (this.input.file.length < 100 * 1024) {\n        this.uploadImg(this.input.file);\n      } else {\n        this.compress(this.input.file);\n      }\n    },\n    // 裁剪切换/取消\n    toggleEdit: function toggleEdit(input) {\n      var _this = this;\n\n      this.edit = input;\n\n      if (input) {\n        this.editing = input;\n        setTimeout(function () {\n          _this.crop();\n        }, 410);\n      } else {\n        if (this.cropper) {\n          this.cropper.destroy();\n          this.cropper = null;\n          setTimeout(function () {// this.editing = input\n          }, 400);\n        }\n      }\n    },\n    // 旋转图片并解决旋转位置错误的bug\n    rotate: function rotate() {\n      //get data\n      var data = this.cropper.getCropBoxData();\n      var contData = this.cropper.getContainerData(); //set data of cropbox to avoid unwanted behavior due to strict mode\n\n      data.top = 0;\n      data.width = 2;\n      data.height = 2;\n      data.left = contData.width / 2 - 1;\n      this.cropper.setCropBoxData(data); //rotate\n\n      this.cropper.rotate(90); //get canvas data\n\n      var canvData = this.cropper.getCanvasData(); //calculate new height and width based on the container dimensions\n\n      var heightOld = canvData.height;\n      var heightNew = contData.height;\n      var koef = heightNew / heightOld;\n      var widthNew = canvData.width * koef;\n      canvData.width = widthNew;\n      canvData.height = heightNew;\n      canvData.top = 0;\n\n      if (canvData.width >= contData.width) {\n        canvData.left = 0;\n      } else {\n        canvData.left = (contData.width - canvData.width) / 2;\n      }\n\n      this.cropper.setCanvasData(canvData); //and now set cropper \"back\" to full crop\n\n      data.left = 0;\n      data.top = 0;\n      data.width = canvData.width;\n      data.height = canvData.height;\n      this.cropper.setCropBoxData(data);\n    },\n    // 裁剪图片\n    cropHandler: function cropHandler() {\n      var img = this.cropper.getCroppedCanvas();\n      img = img.toDataURL();\n\n      if (img.length < 100 * 1024) {\n        this.uploadImg(img);\n      } else {\n        this.compress(img);\n      }\n    },\n    // 压缩图片\n    compress: function compress(input) {\n      var _self = this;\n\n      var image = new Image();\n      image.src = input;\n\n      image.onload = function () {\n        var canvas = document.createElement('canvas');\n        var ctx = canvas.getContext('2d'); // 瓦片canvas\n\n        var tCanvas = document.createElement('canvas');\n        var tctx = tCanvas.getContext('2d');\n        var initSize = image.src.length;\n        var width = image.width;\n        var height = image.height; // 如果图片大于四百万像素，计算压缩比并将大小压至400万以下\n\n        var ratio;\n\n        if ((ratio = width * height / 4000000) > 1) {\n          ratio = Math.sqrt(ratio);\n          width /= ratio;\n          height /= ratio;\n        } else {\n          ratio = 1;\n        }\n\n        canvas.width = width;\n        canvas.height = height; // 铺底色\n\n        ctx.fillStyle = '#fff';\n        ctx.fillRect(0, 0, canvas.width, canvas.height); // 如果图片像素大于100万则使用瓦片绘制\n\n        var count;\n\n        if ((count = width * height / 1000000) > 1) {\n          count = ~~(Math.sqrt(count) + 1); // 计算要分成多少块瓦片\n          // 计算每块瓦片的宽和高\n\n          var nw = ~~(width / count);\n          var nh = ~~(height / count);\n          tCanvas.width = nw;\n          tCanvas.height = nh;\n\n          for (var i = 0; i < count; i++) {\n            for (var j = 0; j < count; j++) {\n              tctx.drawImage(image, i * nw * ratio, j * nh * ratio, nw * ratio, nh * ratio, 0, 0, nw, nh);\n              ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh);\n            }\n          }\n        } else {\n          ctx.drawImage(image, 0, 0, width, height);\n        } // 进行最小压缩\n\n\n        var ndata = canvas.toDataURL('image/jpeg', 0.8);\n\n        _self.uploadImg(ndata);\n      };\n    },\n    // base64转blob\n    dataURLtoBlob: function dataURLtoBlob(dataurl) {\n      var arr = dataurl.split(','),\n          mime = arr[0].match(/:(.*?);/)[1],\n          bstr = atob(arr[1]),\n          n = bstr.length,\n          u8arr = new Uint8Array(n);\n\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n\n      return new Blob([u8arr], {\n        type: mime\n      });\n    },\n    // 上传图片\n    uploadImg: function () {\n      var _uploadImg = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(data) {\n        var filename, suffix, formData, url;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.ossConfig) {\n                  _context.next = 24;\n                  break;\n                }\n\n                filename = new Date().getTime() + '_' + parseInt(Math.random() * 1000000);\n                suffix = data.match(/data:image\\/([a-z]+);base64/)[1];\n                formData = new FormData();\n                formData.append('key', this.ossConfig.dir + filename + '.' + suffix);\n                formData.append('file', this.dataURLtoBlob(data));\n                formData.append('name', filename + '.' + suffix);\n                formData.append('success_action_status', 200);\n                formData.append('policy', this.ossConfig.policy);\n                formData.append('signature', this.ossConfig.signature);\n                formData.append('OSSAccessKeyId', this.ossConfig.accessid);\n                _context.prev = 11;\n                _context.next = 14;\n                return httpService({\n                  method: 'post',\n                  url: this.ossConfig.host,\n                  headers: {\n                    Authorization: '',\n                    'Content-Type': 'multipart/form-data'\n                  },\n                  body: formData\n                });\n\n              case 14:\n                url = \"\".concat(this.ossConfig.host, \"/\").concat(this.ossConfig.dir + filename, \".\").concat(suffix);\n                eventBus.$emit(this.input.eventName, url);\n                this.$router.back();\n                _context.next = 22;\n                break;\n\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](11);\n                dialogService.alert(_context.t0.message);\n\n              case 22:\n                _context.next = 27;\n                break;\n\n              case 24:\n                _context.next = 26;\n                return getOssConfig();\n\n              case 26:\n                this.uploadImg(data);\n\n              case 27:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[11, 19]]);\n      }));\n\n      function uploadImg(_x) {\n        return _uploadImg.apply(this, arguments);\n      }\n\n      return uploadImg;\n    }()\n  }),\n  computed: _objectSpread({}, mapState({\n    input: function input(state) {\n      return state.system.cropper;\n    },\n    ossConfig: function ossConfig(state) {\n      return state.system.ossConfig;\n    }\n  })),\n  destroyed: function destroyed() {\n    if (this.cropper) {\n      this.cropper.destroy();\n    }\n\n    this['system/updateCropper'](null);\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n    @name           cropper\n    @desc           图片裁剪组件(页面级)\n                    数据来源vuex \n    @props\n                    input: {\n                        file        base64图片\n                        ratio       图片裁剪比例\n                        eventName   dispatch事件名\n                    }\n    @emit           \n        eventName   props.eventName\n        path        path            上传成功后的路径\n-->\n\n<template>\n  <div class=\"cropper-wrapper\">\n    <div class=\"cropper-contain\" :class=\"{'edit': edit}\">\n      <img :src=\"input.file || ''\" :class=\"{'edit': editing}\" alt=\"\" id=\"cropper\">\n    </div>\n    <div class=\"cropper-footer\">\n      <template v-if=\"edit\">\n        <span class=\"iconfont icon-cuo3\" @click=\"toggleEdit(false)\"></span>\n        <span class=\"iconfont icon-xuanzhuan\" @click=\"rotate()\"></span>\n        <span class=\"iconfont icon-dagou1\" @click=\"cropHandler()\"></span>\n      </template>\n      <template v-else>\n        <span @click=\"toggleEdit(true)\">编辑</span>\n        <span @click=\"uploadOrigin()\">上传原图</span>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Cropper from 'cropperjs'\nimport { getOssConfig } from '@/utils'\nimport { mapState, mapActions } from 'vuex'\nimport eventBus from '../../../utils/eventBus'\nimport httpService from '@/service/httpService'\nimport dialogService from '../../../service/dialogService.js'\n\nexport default {\n  data() {\n    return {\n      edit: false, // 编辑状态\n      cropper: null, // 裁剪器\n      editing: false // 编辑中\n    }\n  },\n  mounted() {\n    if (!this.input) this.$router.back()\n  },\n  methods: {\n    ...mapActions(['system/updateCropper']),\n    // 裁剪初始化\n    crop() {\n      if (!this.input) return\n      let element = document.querySelector('#cropper')\n      this.cropper = new Cropper(element, {\n        viewMode: 2,\n        modal: false,\n        autoCropArea: 1,\n        dragMode: 'move',\n        aspectRatio: this.input.ratio || ''\n      })\n    },\n    // 上传原图\n    uploadOrigin() {\n      if (this.input.file.length < 100 * 1024) {\n        this.uploadImg(this.input.file)\n      } else {\n        this.compress(this.input.file)\n      }\n    },\n    // 裁剪切换/取消\n    toggleEdit(input) {\n      this.edit = input\n      if (input) {\n        this.editing = input\n        setTimeout(() => {\n          this.crop()\n        }, 410)\n      } else {\n        if (this.cropper) {\n          this.cropper.destroy()\n          this.cropper = null\n          setTimeout(() => {\n            // this.editing = input\n          }, 400)\n        }\n      }\n    },\n    // 旋转图片并解决旋转位置错误的bug\n    rotate() {\n      //get data\n      let data = this.cropper.getCropBoxData()\n      let contData = this.cropper.getContainerData()\n      //set data of cropbox to avoid unwanted behavior due to strict mode\n      data.top = 0\n      data.width = 2\n      data.height = 2\n      data.left = contData.width / 2 - 1\n      this.cropper.setCropBoxData(data)\n      //rotate\n      this.cropper.rotate(90)\n      //get canvas data\n      let canvData = this.cropper.getCanvasData()\n      //calculate new height and width based on the container dimensions\n      let heightOld = canvData.height\n      let heightNew = contData.height\n      let koef = heightNew / heightOld\n      let widthNew = canvData.width * koef\n      canvData.width = widthNew\n      canvData.height = heightNew\n      canvData.top = 0\n      if (canvData.width >= contData.width) {\n        canvData.left = 0\n      } else {\n        canvData.left = (contData.width - canvData.width) / 2\n      }\n      this.cropper.setCanvasData(canvData)\n      //and now set cropper \"back\" to full crop\n      data.left = 0\n      data.top = 0\n      data.width = canvData.width\n      data.height = canvData.height\n      this.cropper.setCropBoxData(data)\n    },\n    // 裁剪图片\n    cropHandler() {\n      let img = this.cropper.getCroppedCanvas()\n      img = img.toDataURL()\n      if (img.length < 100 * 1024) {\n        this.uploadImg(img)\n      } else {\n        this.compress(img)\n      }\n    },\n    // 压缩图片\n    compress(input) {\n      let _self = this\n      let image = new Image()\n      image.src = input\n      image.onload = function() {\n        let canvas = document.createElement('canvas')\n        let ctx = canvas.getContext('2d')\n        // 瓦片canvas\n        let tCanvas = document.createElement('canvas')\n        let tctx = tCanvas.getContext('2d')\n        let initSize = image.src.length\n        let width = image.width\n        let height = image.height\n        // 如果图片大于四百万像素，计算压缩比并将大小压至400万以下\n        let ratio\n        if ((ratio = (width * height) / 4000000) > 1) {\n          ratio = Math.sqrt(ratio)\n          width /= ratio\n          height /= ratio\n        } else {\n          ratio = 1\n        }\n        canvas.width = width\n        canvas.height = height\n        // 铺底色\n        ctx.fillStyle = '#fff'\n        ctx.fillRect(0, 0, canvas.width, canvas.height)\n        // 如果图片像素大于100万则使用瓦片绘制\n        let count\n        if ((count = (width * height) / 1000000) > 1) {\n          count = ~~(Math.sqrt(count) + 1) // 计算要分成多少块瓦片\n          // 计算每块瓦片的宽和高\n          let nw = ~~(width / count)\n          let nh = ~~(height / count)\n          tCanvas.width = nw\n          tCanvas.height = nh\n          for (let i = 0; i < count; i++) {\n            for (let j = 0; j < count; j++) {\n              tctx.drawImage(\n                image,\n                i * nw * ratio,\n                j * nh * ratio,\n                nw * ratio,\n                nh * ratio,\n                0,\n                0,\n                nw,\n                nh\n              )\n              ctx.drawImage(tCanvas, i * nw, j * nh, nw, nh)\n            }\n          }\n        } else {\n          ctx.drawImage(image, 0, 0, width, height)\n        }\n        // 进行最小压缩\n        let ndata = canvas.toDataURL('image/jpeg', 0.8)\n        _self.uploadImg(ndata)\n      }\n    },\n    // base64转blob\n    dataURLtoBlob(dataurl) {\n      var arr = dataurl.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n)\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n)\n      }\n      return new Blob([u8arr], { type: mime })\n    },\n    // 上传图片\n    async uploadImg(data) {\n      if (this.ossConfig) {\n        let filename =\n          new Date().getTime() + '_' + parseInt(Math.random() * 1000000)\n        let suffix = data.match(/data:image\\/([a-z]+);base64/)[1]\n        let formData = new FormData()\n        formData.append('key', this.ossConfig.dir + filename + '.' + suffix)\n        formData.append('file', this.dataURLtoBlob(data))\n        formData.append('name', filename + '.' + suffix)\n        formData.append('success_action_status', 200)\n        formData.append('policy', this.ossConfig.policy)\n        formData.append('signature', this.ossConfig.signature)\n        formData.append('OSSAccessKeyId', this.ossConfig.accessid)\n        try {\n          await httpService({\n            method: 'post',\n            url: this.ossConfig.host,\n            headers: {\n              Authorization: '',\n              'Content-Type': 'multipart/form-data'\n            },\n            body: formData\n          })\n          let url = `${this.ossConfig.host}/${this.ossConfig.dir +\n            filename}.${suffix}`\n          eventBus.$emit(this.input.eventName, url)\n          this.$router.back()\n        } catch (err) {\n          dialogService.alert(err.message)\n        }\n      } else {\n        await getOssConfig()\n        this.uploadImg(data)\n      }\n    }\n  },\n  computed: {\n    ...mapState({\n      input: state => state.system.cropper,\n      ossConfig: state => state.system.ossConfig\n    })\n  },\n  destroyed() {\n    if (this.cropper) {\n      this.cropper.destroy()\n    }\n    this['system/updateCropper'](null)\n  }\n}\n</script>\n\n<style>\n@import url('./cropper.css');\n</style>\n\n<style lang=\"scss\" scoped>\n.cropper-wrapper {\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 9999;\n  display: flex;\n  position: fixed;\n  overflow: hidden;\n  background: #000;\n  flex-direction: column;\n}\n.cropper-contain {\n  flex: 1;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow: auto;\n  align-items: center;\n  justify-content: center;\n  transition: all ease 0.4s;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  -webkit-overflow-scrolling: touch;\n  &.edit {\n    height: calc(100% - 110px);\n    margin-bottom: 110px;\n  }\n}\n#cropper {\n  width: 100%;\n  transition: all ease 0.4s;\n  &.edit {\n    width: unset;\n    max-width: 100%;\n    max-height: 100%;\n  }\n}\n.cropper-footer {\n  bottom: 0;\n  width: 100%;\n  height: 100px;\n  color: #fff;\n  display: flex;\n  font-size: 32px;\n  padding: 0 25px;\n  line-height: 100px;\n  position: absolute;\n  align-items: center;\n  box-sizing: border-box;\n  justify-content: space-between;\n  font-family: 'PingFang SC Medium';\n  background: rgba(19, 31, 43, 0.6);\n  .iconfont {\n    font-size: 48px;\n  }\n}\n</style>\n"],"sourceRoot":"src/module/common/cropper"}]}