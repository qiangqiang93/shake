{"remainingRequest":"/Users/qiang/work/hytx/circle/node_modules/babel-loader/lib/index.js!/Users/qiang/work/hytx/circle/node_modules/eslint-loader/index.js??ref--13-0!/Users/qiang/work/hytx/circle/src/utils/tools.js","dependencies":[{"path":"/Users/qiang/work/hytx/circle/src/utils/tools.js","mtime":1548811772453},{"path":"/Users/qiang/work/hytx/circle/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/circle/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/circle/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/Users/qiang/work/hytx/circle/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport store from '../store';\nimport config from '../config';\nimport system from '../api/system';\nimport circle from '../api/circle';\nimport sdkService from '../service/sdkService';\nimport { isShare, getParamsFromUrl } from '../utils/index'; // 二次分享成功\n// 每次进入应用检查url确保\n\nvar relayed = function relayed() {\n  if (/#/gim.test(location.href)) {\n    location.href = location.href.replace(/\\?(.*)#/im, '#');\n  }\n}; // 检查版本信息\n\n\nvar checkVersion = function checkVersion() {\n  var version = localStorage.version;\n\n  if (version !== config.version) {\n    localStorage.clear();\n    localStorage.version = config.version;\n  }\n}; // 每次进入应用需要清除的缓存\n\n\nvar clearCache = function clearCache() {\n  // 清除弹窗信息\n  store.commit('dialog/clearDialog'); // 清除分享引导\n\n  store.commit('system/shareGuide', false); // 清除微信签名信息\n\n  store.commit('system/updateWxSignature', null);\n}; // 获取签名信息并储存\n\n\nvar getSignatureConfig =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var platform;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            platform = store.state.system.platform;\n\n            if (!(platform === 'wechat')) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 4;\n            return system.getSignature();\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getSignatureConfig() {\n    return _ref.apply(this, arguments);\n  };\n}(); // 进行微信签名.\n\n\nvar sdkSignature = function sdkSignature(to, from) {\n  var _signature = function _signature() {\n    var reg = new RegExp(to.fullPath.replace(/\\?/, '\\\\?') + '$');\n    if (!reg.test(location.href)) return;\n\n    if (config.payPath.includes(to.path)) {\n      sdkService.config('pay');\n    } else if (isShare(to.path)) {\n      if (getParamsFromUrl('task') || /^\\/circle\\/match/.test(to.path)) {\n        sdkService.config('shareTask');\n      } else {\n        sdkService.config('share');\n      }\n    } else {\n      sdkService.config();\n      sdkService.defaultShare();\n    }\n  };\n\n  var _hasTicket = function _hasTicket() {\n    if (store.state.system.signature) {\n      _signature();\n    } else {\n      setTimeout(function () {\n        _hasTicket();\n      }, 200);\n    }\n  }; // 如果来自分享任务则关闭分享引导\n\n\n  if (store.state.system.platform !== 'wechat') return;\n\n  if (isShare(from.path)) {\n    store.commit('system/shareGuide', false);\n  }\n\n  setTimeout(function () {\n    _hasTicket();\n  }, 500);\n}; // 互推圈分享带来的数据统计\n\n\nvar circleCount = function circleCount() {\n  var record_id = getParamsFromUrl('record_id');\n  var created_at = getParamsFromUrl('created_at');\n  var meterial_id = getParamsFromUrl('meterial_id');\n  var interpush_id = getParamsFromUrl('interpush_id');\n  var target_interpush_id = getParamsFromUrl('target_interpush_id');\n\n  if (created_at && interpush_id && target_interpush_id) {\n    circle.shareCount(created_at, interpush_id, target_interpush_id);\n  }\n\n  if (record_id && meterial_id && interpush_id) {\n    circle.shareCountByApp(record_id, meterial_id, interpush_id);\n  }\n}; // 如果是互推圈分享出来的内容,重新拼接分享路径\n\n\nvar reConstructPath = function reConstructPath(url) {\n  var record_id = getParamsFromUrl('record_id');\n  var created_at = getParamsFromUrl('created_at');\n  var meterial_id = getParamsFromUrl('meterial_id');\n  var interpush_id = getParamsFromUrl('interpush_id');\n  var target_interpush_id = getParamsFromUrl('target_interpush_id');\n\n  if (created_at && interpush_id && target_interpush_id) {\n    return \"\".concat(url, \"?created_at=\").concat(created_at, \"&interpush_id=\").concat(interpush_id, \"&target_interpush_id=\").concat(target_interpush_id);\n  } else if (record_id && meterial_id && interpush_id) {\n    return \"\".concat(url, \"?record_id=\").concat(record_id, \"&meterial_id=\").concat(meterial_id, \"&interpush_id=\").concat(interpush_id);\n  } else {\n    return url;\n  }\n}; // 存储错误报告\n\n\nvar errorLog = function errorLog(err) {\n  var options = {\n    type: err.response ? 'http' : 'front',\n    //错误类型\n    message: err.message,\n    // 异常信息\n    name: err.name,\n    // 异常名称\n    stack: err.stack // 异常堆栈信息\n\n  };\n  localStorage.logs = JSON.stringify(options);\n}; // 发送错误报告\n\n\nvar sendError = function sendError() {\n  try {\n    var log = JSON.parse(localStorage.logs);\n    if (log) system.sendError(log);\n    localStorage.removeItem('logs');\n  } catch (err) {}\n};\n\nexport { relayed, errorLog, sendError, clearCache, circleCount, checkVersion, sdkSignature, reConstructPath, getSignatureConfig };",{"version":3,"sources":["/Users/qiang/work/hytx/circle/src/utils/tools.js"],"names":["store","config","system","circle","sdkService","isShare","getParamsFromUrl","relayed","test","location","href","replace","checkVersion","version","localStorage","clear","clearCache","commit","getSignatureConfig","platform","state","getSignature","sdkSignature","to","from","_signature","reg","RegExp","fullPath","payPath","includes","path","defaultShare","_hasTicket","signature","setTimeout","circleCount","record_id","created_at","meterial_id","interpush_id","target_interpush_id","shareCount","shareCountByApp","reConstructPath","url","errorLog","err","options","type","response","message","name","stack","logs","JSON","stringify","sendError","log","parse","removeItem"],"mappings":"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","sourcesContent":["import store from '../store'\nimport config from '../config'\n\nimport system from '../api/system'\nimport circle from '../api/circle'\n\nimport sdkService from '../service/sdkService'\n\nimport { isShare, getParamsFromUrl } from '../utils/index'\n\n// 二次分享成功\n// 每次进入应用检查url确保\nconst relayed = () => {\n  if (/#/gim.test(location.href)) {\n    location.href = location.href.replace(/\\?(.*)#/im, '#')\n  }\n}\n\n// 检查版本信息\nconst checkVersion = () => {\n  let version = localStorage.version\n  if (version !== config.version) {\n    localStorage.clear()\n    localStorage.version = config.version\n  }\n}\n\n// 每次进入应用需要清除的缓存\nconst clearCache = () => {\n  // 清除弹窗信息\n  store.commit('dialog/clearDialog')\n  // 清除分享引导\n  store.commit('system/shareGuide', false)\n  // 清除微信签名信息\n  store.commit('system/updateWxSignature', null)\n}\n\n// 获取签名信息并储存\nconst getSignatureConfig = async function() {\n  let platform = store.state.system.platform\n  if (platform === 'wechat') await system.getSignature()\n}\n\n// 进行微信签名.\nconst sdkSignature = function(to, from) {\n  const _signature = function() {\n    let reg = new RegExp(to.fullPath.replace(/\\?/, '\\\\?') + '$')\n    if (!reg.test(location.href)) return\n    if (config.payPath.includes(to.path)) {\n      sdkService.config('pay')\n    } else if (isShare(to.path)) {\n      if (getParamsFromUrl('task') || /^\\/circle\\/match/.test(to.path)) {\n        sdkService.config('shareTask')\n      } else {\n        sdkService.config('share')\n      }\n    } else {\n      sdkService.config()\n      sdkService.defaultShare()\n    }\n  }\n  const _hasTicket = function() {\n    if (store.state.system.signature) {\n      _signature()\n    } else {\n      setTimeout(() => {\n        _hasTicket()\n      }, 200)\n    }\n  }\n  // 如果来自分享任务则关闭分享引导\n  if (store.state.system.platform !== 'wechat') return\n  if (isShare(from.path)) {\n    store.commit('system/shareGuide', false)\n  }\n\n  setTimeout(() => {\n    _hasTicket()\n  }, 500)\n}\n\n// 互推圈分享带来的数据统计\nconst circleCount = () => {\n  let record_id = getParamsFromUrl('record_id')\n  let created_at = getParamsFromUrl('created_at')\n  let meterial_id = getParamsFromUrl('meterial_id')\n  let interpush_id = getParamsFromUrl('interpush_id')\n  let target_interpush_id = getParamsFromUrl('target_interpush_id')\n  if (created_at && interpush_id && target_interpush_id) {\n    circle.shareCount(created_at, interpush_id, target_interpush_id)\n  }\n  if (record_id && meterial_id && interpush_id) {\n    circle.shareCountByApp(record_id, meterial_id, interpush_id)\n  }\n}\n\n// 如果是互推圈分享出来的内容,重新拼接分享路径\nconst reConstructPath = url => {\n  let record_id = getParamsFromUrl('record_id')\n  let created_at = getParamsFromUrl('created_at')\n  let meterial_id = getParamsFromUrl('meterial_id')\n  let interpush_id = getParamsFromUrl('interpush_id')\n  let target_interpush_id = getParamsFromUrl('target_interpush_id')\n  if (created_at && interpush_id && target_interpush_id) {\n    return `${url}?created_at=${created_at}&interpush_id=${interpush_id}&target_interpush_id=${target_interpush_id}`\n  } else if (record_id && meterial_id && interpush_id) {\n    return `${url}?record_id=${record_id}&meterial_id=${meterial_id}&interpush_id=${interpush_id}`\n  } else {\n    return url\n  }\n}\n// 存储错误报告\nconst errorLog = err => {\n  let options = {\n    type: err.response ? 'http' : 'front', //错误类型\n    message: err.message, // 异常信息\n    name: err.name, // 异常名称\n    stack: err.stack // 异常堆栈信息\n  }\n  localStorage.logs = JSON.stringify(options)\n}\n\n// 发送错误报告\nconst sendError = () => {\n  try {\n    let log = JSON.parse(localStorage.logs)\n    if (log) system.sendError(log)\n    localStorage.removeItem('logs')\n  } catch (err) {}\n}\n\nexport {\n  relayed,\n  errorLog,\n  sendError,\n  clearCache,\n  circleCount,\n  checkVersion,\n  sdkSignature,\n  reConstructPath,\n  getSignatureConfig\n}\n"]}]}