{"remainingRequest":"/Users/qiang/work/hytx/circle/node_modules/babel-loader/lib/index.js!/Users/qiang/work/hytx/circle/node_modules/eslint-loader/index.js??ref--13-0!/Users/qiang/work/hytx/circle/src/filter/index.js","dependencies":[{"path":"/Users/qiang/work/hytx/circle/src/filter/index.js","mtime":1548383196528},{"path":"/Users/qiang/work/hytx/circle/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/circle/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/circle/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { format, formatDistance, formatRelative, subDays } from 'date-fns';\n\nvar toYMD = function toYMD(date) {\n  return format(date, 'YYYY-MM-DD');\n};\n\nvar toYMDHMS = function toYMDHMS(date) {\n  return format(date, 'YYYY-MM-DD hh:mm:ss');\n}; //=> \"Today is a Tuesday\"\n\n\nvar toDistance = function toDistance(params) {\n  return formatDistance(subDays(new Date(), 3), new Date());\n}; //=> \"3 days ago\"\n\n\nvar toRelative = function toRelative(params) {\n  return formatRelative(subDays(new Date(), 3), new Date());\n}; //=> \"last Friday at 7:26 p.m.\"\n\n/* \n    @name   timeFormt\n    @desc   时间格式化\n    @params \n            input   <string>   输入的时间字符串\n            type    <string>   格式化后的时间字符串\n*/\n\n\nvar timeFormt = function timeFormt(input, type) {\n  return format(input, type);\n};\n/* \n    @name   shareNum\n    @desc   分享量格式化\n    @params\n            input   <number>    统计数字\n            type    <string>    应用场景[card]\n*/\n\n\nvar numFormat = function numFormat(input, type) {\n  switch (type) {\n    case 'card':\n      if (input < 1000) {\n        return input;\n      }\n\n      if (input < 10000) {\n        return Math.ceil(input / 1000) + 'K+';\n      }\n\n      return Math.ceil(input / 10000) + 'W+';\n\n    default:\n      return input || '0';\n  }\n};\n/* \n    @name   timeToNow\n    @desc   距离多少天\n    @params\n            val   <string>    日子字符串\n*/\n\n\nvar timeToNow = function timeToNow(val) {\n  if (!val) return val;\n  var now = new Date().getTime();\n  var time = new Date(val.replace(/-/g, '/')).getTime();\n  var distance = (now - time) / 1000;\n\n  if (distance < 60) {\n    return \"\".concat(parseInt(distance), \" \\u79D2\\u524D\");\n  } else if (distance < 60 * 60) {\n    return \"\".concat(parseInt(distance / 60), \" \\u5206\\u949F\\u524D\");\n  } else if (distance < 60 * 60 * 60) {\n    return \"\".concat(parseInt(distance / 60 / 60), \" \\u5C0F\\u65F6\\u524D\");\n  } else {\n    return \"\".concat(parseInt(distance / 60 / 60 / 24), \" \\u5929\\u524D\");\n  }\n};\n\nexport { timeFormt, toYMD, toYMDHMS, toDistance, toRelative, numFormat, timeToNow };",{"version":3,"sources":["/Users/qiang/work/hytx/circle/src/filter/index.js"],"names":["format","formatDistance","formatRelative","subDays","toYMD","date","toYMDHMS","toDistance","params","Date","toRelative","timeFormt","input","type","numFormat","Math","ceil","timeToNow","val","now","getTime","time","replace","distance","parseInt"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,cAAjB,EAAiCC,cAAjC,EAAiDC,OAAjD,QAAgE,UAAhE;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAASC,IAAT,EAAe;AAC3B,SAAOL,MAAM,CAACK,IAAD,EAAO,YAAP,CAAb;AACD,CAFD;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAASD,IAAT,EAAe;AAC9B,SAAOL,MAAM,CAACK,IAAD,EAAO,qBAAP,CAAb;AACD,CAFD,C,CAIA;;;AACA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAASC,MAAT,EAAiB;AAClC,SAAOP,cAAc,CAACE,OAAO,CAAC,IAAIM,IAAJ,EAAD,EAAa,CAAb,CAAR,EAAyB,IAAIA,IAAJ,EAAzB,CAArB;AACD,CAFD,C,CAIA;;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAASF,MAAT,EAAiB;AAClC,SAAON,cAAc,CAACC,OAAO,CAAC,IAAIM,IAAJ,EAAD,EAAa,CAAb,CAAR,EAAyB,IAAIA,IAAJ,EAAzB,CAArB;AACD,CAFD,C,CAIA;;AAEA;;;;;;;;;AAOA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,IAAR,EAAiB;AACjC,SAAOb,MAAM,CAACY,KAAD,EAAQC,IAAR,CAAb;AACD,CAFD;AAIA;;;;;;;;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACF,KAAD,EAAQC,IAAR,EAAiB;AACjC,UAAQA,IAAR;AACE,SAAK,MAAL;AACE,UAAID,KAAK,GAAG,IAAZ,EAAkB;AAChB,eAAOA,KAAP;AACD;;AACD,UAAIA,KAAK,GAAG,KAAZ,EAAmB;AACjB,eAAOG,IAAI,CAACC,IAAL,CAAUJ,KAAK,GAAG,IAAlB,IAA0B,IAAjC;AACD;;AACD,aAAOG,IAAI,CAACC,IAAL,CAAUJ,KAAK,GAAG,KAAlB,IAA2B,IAAlC;;AACF;AACE,aAAOA,KAAK,IAAI,GAAhB;AAVJ;AAYD,CAbD;AAcA;;;;;;;;AAMA,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG,EAAI;AACvB,MAAI,CAACA,GAAL,EAAU,OAAOA,GAAP;AACV,MAAIC,GAAG,GAAG,IAAIV,IAAJ,GAAWW,OAAX,EAAV;AACA,MAAIC,IAAI,GAAG,IAAIZ,IAAJ,CAASS,GAAG,CAACI,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,CAAT,EAAiCF,OAAjC,EAAX;AACA,MAAIG,QAAQ,GAAG,CAACJ,GAAG,GAAGE,IAAP,IAAe,IAA9B;;AACA,MAAIE,QAAQ,GAAG,EAAf,EAAmB;AACjB,qBAAUC,QAAQ,CAACD,QAAD,CAAlB;AACD,GAFD,MAEO,IAAIA,QAAQ,GAAG,KAAK,EAApB,EAAwB;AAC7B,qBAAUC,QAAQ,CAACD,QAAQ,GAAG,EAAZ,CAAlB;AACD,GAFM,MAEA,IAAIA,QAAQ,GAAG,KAAK,EAAL,GAAU,EAAzB,EAA6B;AAClC,qBAAUC,QAAQ,CAACD,QAAQ,GAAG,EAAX,GAAgB,EAAjB,CAAlB;AACD,GAFM,MAEA;AACL,qBAAUC,QAAQ,CAACD,QAAQ,GAAG,EAAX,GAAgB,EAAhB,GAAqB,EAAtB,CAAlB;AACD;AACF,CAdD;;AAgBA,SACEZ,SADF,EAEEP,KAFF,EAGEE,QAHF,EAIEC,UAJF,EAKEG,UALF,EAMEI,SANF,EAOEG,SAPF","sourcesContent":["import { format, formatDistance, formatRelative, subDays } from 'date-fns'\n\nconst toYMD = function(date) {\n  return format(date, 'YYYY-MM-DD')\n}\nconst toYMDHMS = function(date) {\n  return format(date, 'YYYY-MM-DD hh:mm:ss')\n}\n\n//=> \"Today is a Tuesday\"\nconst toDistance = function(params) {\n  return formatDistance(subDays(new Date(), 3), new Date())\n}\n\n//=> \"3 days ago\"\nconst toRelative = function(params) {\n  return formatRelative(subDays(new Date(), 3), new Date())\n}\n\n//=> \"last Friday at 7:26 p.m.\"\n\n/* \n    @name   timeFormt\n    @desc   时间格式化\n    @params \n            input   <string>   输入的时间字符串\n            type    <string>   格式化后的时间字符串\n*/\nconst timeFormt = (input, type) => {\n  return format(input, type)\n}\n\n/* \n    @name   shareNum\n    @desc   分享量格式化\n    @params\n            input   <number>    统计数字\n            type    <string>    应用场景[card]\n*/\nconst numFormat = (input, type) => {\n  switch (type) {\n    case 'card':\n      if (input < 1000) {\n        return input\n      }\n      if (input < 10000) {\n        return Math.ceil(input / 1000) + 'K+'\n      }\n      return Math.ceil(input / 10000) + 'W+'\n    default:\n      return input || '0'\n  }\n}\n/* \n    @name   timeToNow\n    @desc   距离多少天\n    @params\n            val   <string>    日子字符串\n*/\nconst timeToNow = val => {\n  if (!val) return val\n  let now = new Date().getTime()\n  let time = new Date(val.replace(/-/g, '/')).getTime()\n  let distance = (now - time) / 1000\n  if (distance < 60) {\n    return `${parseInt(distance)} 秒前`\n  } else if (distance < 60 * 60) {\n    return `${parseInt(distance / 60)} 分钟前`\n  } else if (distance < 60 * 60 * 60) {\n    return `${parseInt(distance / 60 / 60)} 小时前`\n  } else {\n    return `${parseInt(distance / 60 / 60 / 24)} 天前`\n  }\n}\n\nexport {\n  timeFormt,\n  toYMD,\n  toYMDHMS,\n  toDistance,\n  toRelative,\n  numFormat,\n  timeToNow\n}\n"]}]}