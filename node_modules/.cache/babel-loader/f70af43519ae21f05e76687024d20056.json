{"remainingRequest":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/babel-loader/lib/index.js!/Users/qiang/work/hytx/hytx-rebuild/node_modules/eslint-loader/index.js??ref--13-0!/Users/qiang/work/hytx/hytx-rebuild/src/utils/shake.js","dependencies":[{"path":"/Users/qiang/work/hytx/hytx-rebuild/src/utils/shake.js","mtime":1547792974371},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiang/work/hytx/hytx-rebuild/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* \n    @name       Shake\n    @desc       摇一摇\n    @params     \n        options: {\n            vibrate: boolean    是否开启震动\n        }\n*/\nvar Shake =\n/*#__PURE__*/\nfunction () {\n  function Shake(options) {\n    _classCallCheck(this, Shake);\n\n    _defineProperty(this, \"_isSupport\", true);\n\n    this._last = {}; // 前一次摇动的加速度\n\n    this._timeout = 1000; // 摇一摇时间间隔\n\n    this._lasTime = null; // 最后一次摇动时间\n\n    this._callback = null; // 摇一摇事件回调函数\n\n    this._vibrates = options.vibrates;\n    this._isSupport = !!window.DeviceMotionEvent;\n  } // 是否支持摇一摇\n\n\n  _createClass(Shake, [{\n    key: \"_handler\",\n    // 摇一摇处理函数\n    value: function _handler(event) {\n      var current = event.accelerationIncludingGravity; // 部分手机关闭了摇一摇权限功能\n\n      if (!current.x && !current.y && !current.z) {\n        this._isSupport = false;\n        return;\n      } // 只统计100ms 内的加速度改变量\n\n\n      var currentTime = new Date().getTime();\n      var disTime = currentTime - this._lastTime;\n\n      if (disTime > 100) {\n        // 更新 _lastTime\n        this._lastTime = currentTime; //记录上一次设备在x,y,z方向上的加速度\n\n        if (!this._last.x && !this._last.y && !this._last.z) {\n          this._last = {\n            x: current.x,\n            y: current.y,\n            z: current.z\n          };\n          return false;\n        } //得到两次移动各个方向上的加速度绝对差距\n\n\n        var disX = Math.abs(this._last.x - current.x);\n        var disY = Math.abs(this._last.y - current.y);\n        var disZ = Math.abs(this._last.z - current.z);\n        var sumSquares = disX * disX + disY * disY + disZ * disZ;\n        var distance = Math.sqrt(sumSquares) / disTime * 10000; // 如果加速度平方和的平方根大于设定值则触发摇一摇事件\n\n        if (distance > 6000) {\n          if (navigator.vibrate) {\n            navigator.vibrate(1000);\n          }\n\n          if (this._callback) this._callback();\n        } // 更新最后一次摇动加速度\n\n\n        this._last = {\n          x: current.x,\n          y: current.y,\n          z: current.z\n        };\n      }\n    } // 是否支持摇一摇\n\n  }, {\n    key: \"isSupport\",\n    value: function isSupport() {\n      return this._isSupport;\n    } // 开始监听摇一摇\n\n  }, {\n    key: \"listen\",\n    value: function listen(callback) {\n      this._callback = callback;\n      if (!this._isSupport) return;\n      this._lastTime = new Date().getTime();\n      window.addEventListener('devicemotion', this._handler.bind(this), false);\n    } // 销毁摇一摇\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      window.removeEventListener('devicemotion', this._handler);\n    }\n  }]);\n\n  return Shake;\n}();\n\nexport default Shake;",{"version":3,"sources":["/Users/qiang/work/hytx/hytx-rebuild/src/utils/shake.js"],"names":["Shake","options","_last","_timeout","_lasTime","_callback","_vibrates","vibrates","_isSupport","window","DeviceMotionEvent","event","current","accelerationIncludingGravity","x","y","z","currentTime","Date","getTime","disTime","_lastTime","disX","Math","abs","disY","disZ","sumSquares","distance","sqrt","navigator","vibrate","callback","addEventListener","_handler","bind","removeEventListener"],"mappings":"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","sourcesContent":["/* \n    @name       Shake\n    @desc       摇一摇\n    @params     \n        options: {\n            vibrate: boolean    是否开启震动\n        }\n*/\n\nclass Shake {\n  constructor(options) {\n    this._last = {} // 前一次摇动的加速度\n    this._timeout = 1000 // 摇一摇时间间隔\n    this._lasTime = null // 最后一次摇动时间\n    this._callback = null // 摇一摇事件回调函数\n    this._vibrates = options.vibrates\n    this._isSupport = !!window.DeviceMotionEvent\n  }\n\n  // 是否支持摇一摇\n  _isSupport = true\n\n  // 摇一摇处理函数\n  _handler(event) {\n    let current = event.accelerationIncludingGravity\n    // 部分手机关闭了摇一摇权限功能\n    if (!current.x && !current.y && !current.z) {\n      this._isSupport = false\n      return\n    }\n\n    // 只统计100ms 内的加速度改变量\n    let currentTime = new Date().getTime()\n    let disTime = currentTime - this._lastTime\n    if (disTime > 100) {\n      // 更新 _lastTime\n      this._lastTime = currentTime\n\n      //记录上一次设备在x,y,z方向上的加速度\n      if (!this._last.x && !this._last.y && !this._last.z) {\n        this._last = {\n          x: current.x,\n          y: current.y,\n          z: current.z\n        }\n        return false\n      }\n\n      //得到两次移动各个方向上的加速度绝对差距\n      let disX = Math.abs(this._last.x - current.x)\n      let disY = Math.abs(this._last.y - current.y)\n      let disZ = Math.abs(this._last.z - current.z)\n      let sumSquares = disX * disX + disY * disY + disZ * disZ\n      let distance = (Math.sqrt(sumSquares) / disTime) * 10000\n      // 如果加速度平方和的平方根大于设定值则触发摇一摇事件\n      if (distance > 6000) {\n        if (navigator.vibrate) {\n          navigator.vibrate(1000)\n        }\n        if (this._callback) this._callback()\n      }\n\n      // 更新最后一次摇动加速度\n      this._last = {\n        x: current.x,\n        y: current.y,\n        z: current.z\n      }\n    }\n  }\n\n  // 是否支持摇一摇\n  isSupport() {\n    return this._isSupport\n  }\n\n  // 开始监听摇一摇\n  listen(callback) {\n    this._callback = callback\n    if (!this._isSupport) return\n    this._lastTime = new Date().getTime()\n    window.addEventListener('devicemotion', this._handler.bind(this), false)\n  }\n\n  // 销毁摇一摇\n  destroy() {\n    window.removeEventListener('devicemotion', this._handler)\n  }\n}\n\nexport default Shake\n"]}]}